/**
 * Slide animation preset
 */
export const slide = {
    hide: (notification) => {
        // Prepare variables
        const config = notification.component.getConfig();
        const shift = notification.component.getShift();
        let from;
        let to;
        // Configure variables, depending on configuration and component
        if (config.position.horizontal.position === 'left') {
            from = {
                transform: `translate3d( 0, ${shift}px, 0 )`,
            };
            to = {
                transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), ${shift}px, 0 )`,
            };
        }
        else if (config.position.horizontal.position === 'right') {
            from = {
                transform: `translate3d( 0, ${shift}px, 0 )`,
            };
            to = {
                transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), ${shift}px, 0 )`,
            };
        }
        else {
            let horizontalPosition;
            if (config.position.vertical.position === 'top') {
                horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;
            }
            else {
                horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;
            }
            from = {
                transform: `translate3d( -50%, ${shift}px, 0 )`,
            };
            to = {
                transform: `translate3d( -50%, ${horizontalPosition}, 0 )`,
            };
        }
        // Done
        return {
            from,
            to,
        };
    },
    show: (notification) => {
        // Prepare variables
        const config = notification.component.getConfig();
        let from;
        let to;
        // Configure variables, depending on configuration and component
        if (config.position.horizontal.position === 'left') {
            from = {
                transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), 0, 0 )`,
            };
            to = {
                transform: 'translate3d( 0, 0, 0 )',
            };
        }
        else if (config.position.horizontal.position === 'right') {
            from = {
                transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), 0, 0 )`,
            };
            to = {
                transform: 'translate3d( 0, 0, 0 )',
            };
        }
        else {
            let horizontalPosition;
            if (config.position.vertical.position === 'top') {
                horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;
            }
            else {
                horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;
            }
            from = {
                transform: `translate3d( -50%, ${horizontalPosition}, 0 )`,
            };
            to = {
                transform: 'translate3d( -50%, 0, 0 )',
            };
        }
        // Done
        return {
            from,
            to,
        };
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGUuYW5pbWF0aW9uLXByZXNldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbm90aWZpZXIvc3JjL2xpYi9hbmltYXRpb24tcHJlc2V0cy9zbGlkZS5hbmltYXRpb24tcHJlc2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUE0QjtJQUM1QyxJQUFJLEVBQUUsQ0FBQyxZQUFrQyxFQUFvQyxFQUFFO1FBQzdFLG9CQUFvQjtRQUNwQixNQUFNLE1BQU0sR0FBbUIsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNsRSxNQUFNLEtBQUssR0FBVyxZQUFZLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3hELElBQUksSUFFSCxDQUFDO1FBQ0YsSUFBSSxFQUVILENBQUM7UUFFRixnRUFBZ0U7UUFDaEUsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEtBQUssTUFBTSxFQUFFO1lBQ2xELElBQUksR0FBRztnQkFDTCxTQUFTLEVBQUUsbUJBQW1CLEtBQUssU0FBUzthQUM3QyxDQUFDO1lBQ0YsRUFBRSxHQUFHO2dCQUNILFNBQVMsRUFBRSw4QkFBOEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxnQkFBZ0IsS0FBSyxTQUFTO2FBQzNHLENBQUM7U0FDSDthQUFNLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxLQUFLLE9BQU8sRUFBRTtZQUMxRCxJQUFJLEdBQUc7Z0JBQ0wsU0FBUyxFQUFFLG1CQUFtQixLQUFLLFNBQVM7YUFDN0MsQ0FBQztZQUNGLEVBQUUsR0FBRztnQkFDSCxTQUFTLEVBQUUsNkJBQTZCLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsZ0JBQWdCLEtBQUssU0FBUzthQUMxRyxDQUFDO1NBQ0g7YUFBTTtZQUNMLElBQUksa0JBQTBCLENBQUM7WUFDL0IsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEtBQUssS0FBSyxFQUFFO2dCQUMvQyxrQkFBa0IsR0FBRyxpQkFBaUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxhQUFhLENBQUM7YUFDeEY7aUJBQU07Z0JBQ0wsa0JBQWtCLEdBQUcsZ0JBQWdCLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsYUFBYSxDQUFDO2FBQ3ZGO1lBQ0QsSUFBSSxHQUFHO2dCQUNMLFNBQVMsRUFBRSxzQkFBc0IsS0FBSyxTQUFTO2FBQ2hELENBQUM7WUFDRixFQUFFLEdBQUc7Z0JBQ0gsU0FBUyxFQUFFLHNCQUFzQixrQkFBa0IsT0FBTzthQUMzRCxDQUFDO1NBQ0g7UUFFRCxPQUFPO1FBQ1AsT0FBTztZQUNMLElBQUk7WUFDSixFQUFFO1NBQ0gsQ0FBQztJQUNKLENBQUM7SUFDRCxJQUFJLEVBQUUsQ0FBQyxZQUFrQyxFQUFvQyxFQUFFO1FBQzdFLG9CQUFvQjtRQUNwQixNQUFNLE1BQU0sR0FBbUIsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNsRSxJQUFJLElBRUgsQ0FBQztRQUNGLElBQUksRUFFSCxDQUFDO1FBRUYsZ0VBQWdFO1FBQ2hFLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFBRTtZQUNsRCxJQUFJLEdBQUc7Z0JBQ0wsU0FBUyxFQUFFLDhCQUE4QixNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLHFCQUFxQjthQUNsRyxDQUFDO1lBQ0YsRUFBRSxHQUFHO2dCQUNILFNBQVMsRUFBRSx3QkFBd0I7YUFDcEMsQ0FBQztTQUNIO2FBQU0sSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEtBQUssT0FBTyxFQUFFO1lBQzFELElBQUksR0FBRztnQkFDTCxTQUFTLEVBQUUsNkJBQTZCLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEscUJBQXFCO2FBQ2pHLENBQUM7WUFDRixFQUFFLEdBQUc7Z0JBQ0gsU0FBUyxFQUFFLHdCQUF3QjthQUNwQyxDQUFDO1NBQ0g7YUFBTTtZQUNMLElBQUksa0JBQTBCLENBQUM7WUFDL0IsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEtBQUssS0FBSyxFQUFFO2dCQUMvQyxrQkFBa0IsR0FBRyxpQkFBaUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxhQUFhLENBQUM7YUFDeEY7aUJBQU07Z0JBQ0wsa0JBQWtCLEdBQUcsZ0JBQWdCLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsYUFBYSxDQUFDO2FBQ3ZGO1lBQ0QsSUFBSSxHQUFHO2dCQUNMLFNBQVMsRUFBRSxzQkFBc0Isa0JBQWtCLE9BQU87YUFDM0QsQ0FBQztZQUNGLEVBQUUsR0FBRztnQkFDSCxTQUFTLEVBQUUsMkJBQTJCO2FBQ3ZDLENBQUM7U0FDSDtRQUVELE9BQU87UUFDUCxPQUFPO1lBQ0wsSUFBSTtZQUNKLEVBQUU7U0FDSCxDQUFDO0lBQ0osQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb3RpZmllckFuaW1hdGlvblByZXNldCwgTm90aWZpZXJBbmltYXRpb25QcmVzZXRLZXlmcmFtZXMgfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItYW5pbWF0aW9uLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWVyQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL25vdGlmaWVyLWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQgeyBOb3RpZmllck5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1ub3RpZmljYXRpb24ubW9kZWwnO1xuXG4vKipcbiAqIFNsaWRlIGFuaW1hdGlvbiBwcmVzZXRcbiAqL1xuZXhwb3J0IGNvbnN0IHNsaWRlOiBOb3RpZmllckFuaW1hdGlvblByZXNldCA9IHtcbiAgaGlkZTogKG5vdGlmaWNhdGlvbjogTm90aWZpZXJOb3RpZmljYXRpb24pOiBOb3RpZmllckFuaW1hdGlvblByZXNldEtleWZyYW1lcyA9PiB7XG4gICAgLy8gUHJlcGFyZSB2YXJpYWJsZXNcbiAgICBjb25zdCBjb25maWc6IE5vdGlmaWVyQ29uZmlnID0gbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRDb25maWcoKTtcbiAgICBjb25zdCBzaGlmdDogbnVtYmVyID0gbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRTaGlmdCgpO1xuICAgIGxldCBmcm9tOiB7XG4gICAgICBbYW5pbWF0YWJsZVByb3BlcnR5TmFtZTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH07XG4gICAgbGV0IHRvOiB7XG4gICAgICBbYW5pbWF0YWJsZVByb3BlcnR5TmFtZTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH07XG5cbiAgICAvLyBDb25maWd1cmUgdmFyaWFibGVzLCBkZXBlbmRpbmcgb24gY29uZmlndXJhdGlvbiBhbmQgY29tcG9uZW50XG4gICAgaWYgKGNvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLnBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgIGZyb20gPSB7XG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCAwLCAke3NoaWZ0fXB4LCAwIClgLFxuICAgICAgfTtcbiAgICAgIHRvID0ge1xuICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCggY2FsYyggLTEwMCUgLSAke2NvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLmRpc3RhbmNlfXB4IC0gMTBweCApLCAke3NoaWZ0fXB4LCAwIClgLFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLnBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICBmcm9tID0ge1xuICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCggMCwgJHtzaGlmdH1weCwgMCApYCxcbiAgICAgIH07XG4gICAgICB0byA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlM2QoIGNhbGMoIDEwMCUgKyAke2NvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLmRpc3RhbmNlfXB4ICsgMTBweCApLCAke3NoaWZ0fXB4LCAwIClgLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGhvcml6b250YWxQb3NpdGlvbjogc3RyaW5nO1xuICAgICAgaWYgKGNvbmZpZy5wb3NpdGlvbi52ZXJ0aWNhbC5wb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uID0gYGNhbGMoIC0xMDAlIC0gJHtjb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5kaXN0YW5jZX1weCAtIDEwcHggKWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBob3Jpem9udGFsUG9zaXRpb24gPSBgY2FsYyggMTAwJSArICR7Y29uZmlnLnBvc2l0aW9uLmhvcml6b250YWwuZGlzdGFuY2V9cHggKyAxMHB4IClgO1xuICAgICAgfVxuICAgICAgZnJvbSA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlM2QoIC01MCUsICR7c2hpZnR9cHgsIDAgKWAsXG4gICAgICB9O1xuICAgICAgdG8gPSB7XG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCAtNTAlLCAke2hvcml6b250YWxQb3NpdGlvbn0sIDAgKWAsXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIERvbmVcbiAgICByZXR1cm4ge1xuICAgICAgZnJvbSxcbiAgICAgIHRvLFxuICAgIH07XG4gIH0sXG4gIHNob3c6IChub3RpZmljYXRpb246IE5vdGlmaWVyTm90aWZpY2F0aW9uKTogTm90aWZpZXJBbmltYXRpb25QcmVzZXRLZXlmcmFtZXMgPT4ge1xuICAgIC8vIFByZXBhcmUgdmFyaWFibGVzXG4gICAgY29uc3QgY29uZmlnOiBOb3RpZmllckNvbmZpZyA9IG5vdGlmaWNhdGlvbi5jb21wb25lbnQuZ2V0Q29uZmlnKCk7XG4gICAgbGV0IGZyb206IHtcbiAgICAgIFthbmltYXRhYmxlUHJvcGVydHlOYW1lOiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTtcbiAgICBsZXQgdG86IHtcbiAgICAgIFthbmltYXRhYmxlUHJvcGVydHlOYW1lOiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTtcblxuICAgIC8vIENvbmZpZ3VyZSB2YXJpYWJsZXMsIGRlcGVuZGluZyBvbiBjb25maWd1cmF0aW9uIGFuZCBjb21wb25lbnRcbiAgICBpZiAoY29uZmlnLnBvc2l0aW9uLmhvcml6b250YWwucG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgZnJvbSA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlM2QoIGNhbGMoIC0xMDAlIC0gJHtjb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5kaXN0YW5jZX1weCAtIDEwcHggKSwgMCwgMCApYCxcbiAgICAgIH07XG4gICAgICB0byA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoIDAsIDAsIDAgKScsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoY29uZmlnLnBvc2l0aW9uLmhvcml6b250YWwucG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgIGZyb20gPSB7XG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZTNkKCBjYWxjKCAxMDAlICsgJHtjb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5kaXN0YW5jZX1weCArIDEwcHggKSwgMCwgMCApYCxcbiAgICAgIH07XG4gICAgICB0byA9IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoIDAsIDAsIDAgKScsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgaG9yaXpvbnRhbFBvc2l0aW9uOiBzdHJpbmc7XG4gICAgICBpZiAoY29uZmlnLnBvc2l0aW9uLnZlcnRpY2FsLnBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgICBob3Jpem9udGFsUG9zaXRpb24gPSBgY2FsYyggLTEwMCUgLSAke2NvbmZpZy5wb3NpdGlvbi5ob3Jpem9udGFsLmRpc3RhbmNlfXB4IC0gMTBweCApYDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhvcml6b250YWxQb3NpdGlvbiA9IGBjYWxjKCAxMDAlICsgJHtjb25maWcucG9zaXRpb24uaG9yaXpvbnRhbC5kaXN0YW5jZX1weCArIDEwcHggKWA7XG4gICAgICB9XG4gICAgICBmcm9tID0ge1xuICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUzZCggLTUwJSwgJHtob3Jpem9udGFsUG9zaXRpb259LCAwIClgLFxuICAgICAgfTtcbiAgICAgIHRvID0ge1xuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCggLTUwJSwgMCwgMCApJyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRG9uZVxuICAgIHJldHVybiB7XG4gICAgICBmcm9tLFxuICAgICAgdG8sXG4gICAgfTtcbiAgfSxcbn07XG4iXX0=