import { Inject, Injectable } from '@angular/core';
import { NotifierConfigToken } from '../notifier.tokens';
import * as i0 from "@angular/core";
import * as i1 from "./notifier-queue.service";
import * as i2 from "../models/notifier-config.model";
/**
 * Notifier service
 *
 * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building
 * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into
 * actions, which then get thrown into the action queue - eventually being processed at the right moment.
 */
export class NotifierService {
    /**
     * Constructor
     *
     * @param notifierQueueService Notifier queue service
     * @param config               Notifier configuration, optionally injected as a dependency
     */
    constructor(notifierQueueService, config) {
        this.queueService = notifierQueueService;
        this.config = config;
    }
    /**
     * Get the notifier configuration
     *
     * @returns Notifier configuration
     */
    getConfig() {
        return this.config;
    }
    /**
     * Get the observable for handling actions
     *
     * @returns Observable of NotifierAction
     */
    get actionStream() {
        return this.queueService.actionStream.asObservable();
    }
    /**
     * API: Show a new notification
     *
     * @param notificationOptions Notification options
     */
    show(notificationOptions) {
        this.queueService.push({
            payload: notificationOptions,
            type: 'SHOW',
        });
    }
    /**
     * API: Hide a specific notification, given its ID
     *
     * @param notificationId ID of the notification to hide
     */
    hide(notificationId) {
        this.queueService.push({
            payload: notificationId,
            type: 'HIDE',
        });
    }
    /**
     * API: Hide the newest notification
     */
    hideNewest() {
        this.queueService.push({
            type: 'HIDE_NEWEST',
        });
    }
    /**
     * API: Hide the oldest notification
     */
    hideOldest() {
        this.queueService.push({
            type: 'HIDE_OLDEST',
        });
    }
    /**
     * API: Hide all notifications at once
     */
    hideAll() {
        this.queueService.push({
            type: 'HIDE_ALL',
        });
    }
    /**
     * API: Shortcut for showing a new notification
     *
     * @param type             Type of the notification
     * @param message          Message of the notification
     * @param [notificationId] Unique ID for the notification (optional)
     */
    notify(type, message, notificationId) {
        const notificationOptions = {
            message,
            type,
        };
        if (notificationId !== undefined) {
            notificationOptions.id = notificationId;
        }
        this.show(notificationOptions);
    }
}
NotifierService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NotifierService, deps: [{ token: i1.NotifierQueueService }, { token: NotifierConfigToken }], target: i0.ɵɵFactoryTarget.Injectable });
NotifierService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NotifierService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NotifierService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.NotifierQueueService }, { type: i2.NotifierConfig, decorators: [{
                    type: Inject,
                    args: [NotifierConfigToken]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbm90aWZpZXIvc3JjL2xpYi9zZXJ2aWNlcy9ub3RpZmllci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTW5ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7O0FBR3pEOzs7Ozs7R0FNRztBQUVILE1BQU0sT0FBTyxlQUFlO0lBVzFCOzs7OztPQUtHO0lBQ0gsWUFBbUIsb0JBQTBDLEVBQStCLE1BQXNCO1FBQ2hILElBQUksQ0FBQyxZQUFZLEdBQUcsb0JBQW9CLENBQUM7UUFDekMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxTQUFTO1FBQ2QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBVyxZQUFZO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdkQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxJQUFJLENBQUMsbUJBQWdEO1FBQzFELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQ3JCLE9BQU8sRUFBRSxtQkFBbUI7WUFDNUIsSUFBSSxFQUFFLE1BQU07U0FDYixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLElBQUksQ0FBQyxjQUFzQjtRQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUNyQixPQUFPLEVBQUUsY0FBYztZQUN2QixJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLFVBQVU7UUFDZixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUNyQixJQUFJLEVBQUUsYUFBYTtTQUNwQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxVQUFVO1FBQ2YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7WUFDckIsSUFBSSxFQUFFLGFBQWE7U0FDcEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ksT0FBTztRQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQ3JCLElBQUksRUFBRSxVQUFVO1NBQ2pCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQUMsSUFBWSxFQUFFLE9BQWUsRUFBRSxjQUF1QjtRQUNsRSxNQUFNLG1CQUFtQixHQUFnQztZQUN2RCxPQUFPO1lBQ1AsSUFBSTtTQUNMLENBQUM7UUFDRixJQUFJLGNBQWMsS0FBSyxTQUFTLEVBQUU7WUFDaEMsbUJBQW1CLENBQUMsRUFBRSxHQUFHLGNBQWMsQ0FBQztTQUN6QztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs0R0EzR1UsZUFBZSxzREFpQjZDLG1CQUFtQjtnSEFqQi9FLGVBQWU7MkZBQWYsZUFBZTtrQkFEM0IsVUFBVTs7MEJBa0J1RCxNQUFNOzJCQUFDLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBOb3RpZmllckFjdGlvbiB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1hY3Rpb24ubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpZXJDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWVyTm90aWZpY2F0aW9uT3B0aW9ucyB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1ub3RpZmljYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpZXJDb25maWdUb2tlbiB9IGZyb20gJy4uL25vdGlmaWVyLnRva2Vucyc7XG5pbXBvcnQgeyBOb3RpZmllclF1ZXVlU2VydmljZSB9IGZyb20gJy4vbm90aWZpZXItcXVldWUuc2VydmljZSc7XG5cbi8qKlxuICogTm90aWZpZXIgc2VydmljZVxuICpcbiAqIFRoaXMgc2VydmljZSBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIHB1YmxpYyBub3RpZmllciBBUEkuIE9uY2UgaW5qZWN0ZWQgaW50byBhIGNvbXBvbmVudCwgZGlyZWN0aXZlLCBwaXBlLCBzZXJ2aWNlLCBvciBhbnkgb3RoZXIgYnVpbGRpbmdcbiAqIGJsb2NrIG9mIGFuIGFwcGxpY2F0aW9ucywgaXQgY2FuIGJlIHVzZWQgdG8gc2hvdyBuZXcgbm90aWZpY2F0aW9ucywgYW5kIGhpZGUgZXhpc3Rpbmcgb25lcy4gSW50ZXJuYWxseSwgaXQgdHJhbnNmb3JtcyBBUEkgY2FsbHMgaW50b1xuICogYWN0aW9ucywgd2hpY2ggdGhlbiBnZXQgdGhyb3duIGludG8gdGhlIGFjdGlvbiBxdWV1ZSAtIGV2ZW50dWFsbHkgYmVpbmcgcHJvY2Vzc2VkIGF0IHRoZSByaWdodCBtb21lbnQuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOb3RpZmllclNlcnZpY2Uge1xuICAvKipcbiAgICogTm90aWZpZXIgcXVldWUgc2VydmljZVxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBxdWV1ZVNlcnZpY2U6IE5vdGlmaWVyUXVldWVTZXJ2aWNlO1xuXG4gIC8qKlxuICAgKiBOb3RpZmllciBjb25maWd1cmF0aW9uXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZzogTm90aWZpZXJDb25maWc7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSBub3RpZmllclF1ZXVlU2VydmljZSBOb3RpZmllciBxdWV1ZSBzZXJ2aWNlXG4gICAqIEBwYXJhbSBjb25maWcgICAgICAgICAgICAgICBOb3RpZmllciBjb25maWd1cmF0aW9uLCBvcHRpb25hbGx5IGluamVjdGVkIGFzIGEgZGVwZW5kZW5jeVxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKG5vdGlmaWVyUXVldWVTZXJ2aWNlOiBOb3RpZmllclF1ZXVlU2VydmljZSwgQEluamVjdChOb3RpZmllckNvbmZpZ1Rva2VuKSBjb25maWc6IE5vdGlmaWVyQ29uZmlnKSB7XG4gICAgdGhpcy5xdWV1ZVNlcnZpY2UgPSBub3RpZmllclF1ZXVlU2VydmljZTtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5vdGlmaWVyIGNvbmZpZ3VyYXRpb25cbiAgICpcbiAgICogQHJldHVybnMgTm90aWZpZXIgY29uZmlndXJhdGlvblxuICAgKi9cbiAgcHVibGljIGdldENvbmZpZygpOiBOb3RpZmllckNvbmZpZyB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgb2JzZXJ2YWJsZSBmb3IgaGFuZGxpbmcgYWN0aW9uc1xuICAgKlxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlIG9mIE5vdGlmaWVyQWN0aW9uXG4gICAqL1xuICBwdWJsaWMgZ2V0IGFjdGlvblN0cmVhbSgpOiBPYnNlcnZhYmxlPE5vdGlmaWVyQWN0aW9uPiB7XG4gICAgcmV0dXJuIHRoaXMucXVldWVTZXJ2aWNlLmFjdGlvblN0cmVhbS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBUEk6IFNob3cgYSBuZXcgbm90aWZpY2F0aW9uXG4gICAqXG4gICAqIEBwYXJhbSBub3RpZmljYXRpb25PcHRpb25zIE5vdGlmaWNhdGlvbiBvcHRpb25zXG4gICAqL1xuICBwdWJsaWMgc2hvdyhub3RpZmljYXRpb25PcHRpb25zOiBOb3RpZmllck5vdGlmaWNhdGlvbk9wdGlvbnMpOiB2b2lkIHtcbiAgICB0aGlzLnF1ZXVlU2VydmljZS5wdXNoKHtcbiAgICAgIHBheWxvYWQ6IG5vdGlmaWNhdGlvbk9wdGlvbnMsXG4gICAgICB0eXBlOiAnU0hPVycsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQVBJOiBIaWRlIGEgc3BlY2lmaWMgbm90aWZpY2F0aW9uLCBnaXZlbiBpdHMgSURcbiAgICpcbiAgICogQHBhcmFtIG5vdGlmaWNhdGlvbklkIElEIG9mIHRoZSBub3RpZmljYXRpb24gdG8gaGlkZVxuICAgKi9cbiAgcHVibGljIGhpZGUobm90aWZpY2F0aW9uSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMucXVldWVTZXJ2aWNlLnB1c2goe1xuICAgICAgcGF5bG9hZDogbm90aWZpY2F0aW9uSWQsXG4gICAgICB0eXBlOiAnSElERScsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQVBJOiBIaWRlIHRoZSBuZXdlc3Qgbm90aWZpY2F0aW9uXG4gICAqL1xuICBwdWJsaWMgaGlkZU5ld2VzdCgpOiB2b2lkIHtcbiAgICB0aGlzLnF1ZXVlU2VydmljZS5wdXNoKHtcbiAgICAgIHR5cGU6ICdISURFX05FV0VTVCcsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQVBJOiBIaWRlIHRoZSBvbGRlc3Qgbm90aWZpY2F0aW9uXG4gICAqL1xuICBwdWJsaWMgaGlkZU9sZGVzdCgpOiB2b2lkIHtcbiAgICB0aGlzLnF1ZXVlU2VydmljZS5wdXNoKHtcbiAgICAgIHR5cGU6ICdISURFX09MREVTVCcsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQVBJOiBIaWRlIGFsbCBub3RpZmljYXRpb25zIGF0IG9uY2VcbiAgICovXG4gIHB1YmxpYyBoaWRlQWxsKCk6IHZvaWQge1xuICAgIHRoaXMucXVldWVTZXJ2aWNlLnB1c2goe1xuICAgICAgdHlwZTogJ0hJREVfQUxMJyxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBUEk6IFNob3J0Y3V0IGZvciBzaG93aW5nIGEgbmV3IG5vdGlmaWNhdGlvblxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSAgICAgICAgICAgICBUeXBlIG9mIHRoZSBub3RpZmljYXRpb25cbiAgICogQHBhcmFtIG1lc3NhZ2UgICAgICAgICAgTWVzc2FnZSBvZiB0aGUgbm90aWZpY2F0aW9uXG4gICAqIEBwYXJhbSBbbm90aWZpY2F0aW9uSWRdIFVuaXF1ZSBJRCBmb3IgdGhlIG5vdGlmaWNhdGlvbiAob3B0aW9uYWwpXG4gICAqL1xuICBwdWJsaWMgbm90aWZ5KHR5cGU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nLCBub3RpZmljYXRpb25JZD86IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvbk9wdGlvbnM6IE5vdGlmaWVyTm90aWZpY2F0aW9uT3B0aW9ucyA9IHtcbiAgICAgIG1lc3NhZ2UsXG4gICAgICB0eXBlLFxuICAgIH07XG4gICAgaWYgKG5vdGlmaWNhdGlvbklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vdGlmaWNhdGlvbk9wdGlvbnMuaWQgPSBub3RpZmljYXRpb25JZDtcbiAgICB9XG4gICAgdGhpcy5zaG93KG5vdGlmaWNhdGlvbk9wdGlvbnMpO1xuICB9XG59XG4iXX0=