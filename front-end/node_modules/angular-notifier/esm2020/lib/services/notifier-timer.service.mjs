import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Notifier timer service
 *
 * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a
 * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.
 */
export class NotifierTimerService {
    /**
     * Constructor
     */
    constructor() {
        this.now = 0;
        this.remaining = 0;
    }
    /**
     * Start (or resume) the timer
     *
     * @param   duration Timer duration, in ms
     * @returns          Promise, resolved once the timer finishes
     */
    start(duration) {
        return new Promise((resolve) => {
            // For the first run ...
            this.remaining = duration;
            // Setup, then start the timer
            this.finishPromiseResolver = resolve;
            this.continue();
        });
    }
    /**
     * Pause the timer
     */
    pause() {
        clearTimeout(this.timerId);
        this.remaining -= new Date().getTime() - this.now;
    }
    /**
     * Continue the timer
     */
    continue() {
        this.now = new Date().getTime();
        this.timerId = window.setTimeout(() => {
            this.finish();
        }, this.remaining);
    }
    /**
     * Stop the timer
     */
    stop() {
        clearTimeout(this.timerId);
        this.remaining = 0;
    }
    /**
     * Finish up the timeout by resolving the timer promise
     */
    finish() {
        this.finishPromiseResolver();
    }
}
NotifierTimerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NotifierTimerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NotifierTimerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NotifierTimerService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NotifierTimerService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItdGltZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbm90aWZpZXIvc3JjL2xpYi9zZXJ2aWNlcy9ub3RpZmllci10aW1lci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRTNDOzs7OztHQUtHO0FBRUgsTUFBTSxPQUFPLG9CQUFvQjtJQXFCL0I7O09BRUc7SUFDSDtRQUNFLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksS0FBSyxDQUFDLFFBQWdCO1FBQzNCLE9BQU8sSUFBSSxPQUFPLENBQU8sQ0FBQyxPQUFtQixFQUFFLEVBQUU7WUFDL0Msd0JBQXdCO1lBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1lBRTFCLDhCQUE4QjtZQUM5QixJQUFJLENBQUMscUJBQXFCLEdBQUcsT0FBTyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLEtBQUs7UUFDVixZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ3BELENBQUM7SUFFRDs7T0FFRztJQUNJLFFBQVE7UUFDYixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNwQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDaEIsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxJQUFJO1FBQ1QsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSyxNQUFNO1FBQ1osSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDL0IsQ0FBQzs7aUhBN0VVLG9CQUFvQjtxSEFBcEIsb0JBQW9COzJGQUFwQixvQkFBb0I7a0JBRGhDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogTm90aWZpZXIgdGltZXIgc2VydmljZVxuICpcbiAqIFRoaXMgc2VydmljZSBhY3RzIGFzIGEgdGltZXIsIG5lZWRlZCBkdWUgdG8gdGhlIHN0aWxsIHJhdGhlciBsaW1pdGVkIHNldFRpbWVvdXQgSmF2YVNjcmlwdCBBUEkuIFRoZSB0aW1lciBzZXJ2aWNlIGNhbiBzdGFydCBhbmQgc3RvcCBhXG4gKiB0aW1lci4gRnVydGhlcm1vcmUsIGl0IGNhbiBhbHNvIHBhdXNlIHRoZSB0aW1lciBhdCBhbnkgdGltZSwgYW5kIHJlc3VtZSBsYXRlciBvbi4gVGhlIHRpbWVyIEFQSSB3b3JrZCBwcm9taXNlLWJhc2VkLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTm90aWZpZXJUaW1lclNlcnZpY2Uge1xuICAvKipcbiAgICogVGltZXN0YW1wIChpbiBtcyksIGNyZWF0ZWQgaW4gdGhlIG1vbWVudCB0aGUgdGltZXIgc3RhcnRzXG4gICAqL1xuICBwcml2YXRlIG5vdzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBSZW1haW5pbmcgdGltZSAoaW4gbXMpXG4gICAqL1xuICBwcml2YXRlIHJlbWFpbmluZzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaW1lb3V0IElELCB1c2VkIGZvciBjbGVhcmluZyB0aGUgdGltZW91dCBsYXRlciBvblxuICAgKi9cbiAgcHJpdmF0ZSB0aW1lcklkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFByb21pc2UgcmVzb2x2ZSBmdW5jdGlvbiwgZXZlbnR1YWxseSBnZXR0aW5nIGNhbGxlZCBvbmNlIHRoZSB0aW1lciBmaW5pc2hlc1xuICAgKi9cbiAgcHJpdmF0ZSBmaW5pc2hQcm9taXNlUmVzb2x2ZXI6ICgpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ub3cgPSAwO1xuICAgIHRoaXMucmVtYWluaW5nID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCAob3IgcmVzdW1lKSB0aGUgdGltZXJcbiAgICpcbiAgICogQHBhcmFtICAgZHVyYXRpb24gVGltZXIgZHVyYXRpb24sIGluIG1zXG4gICAqIEByZXR1cm5zICAgICAgICAgIFByb21pc2UsIHJlc29sdmVkIG9uY2UgdGhlIHRpbWVyIGZpbmlzaGVzXG4gICAqL1xuICBwdWJsaWMgc3RhcnQoZHVyYXRpb246IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZTogKCkgPT4gdm9pZCkgPT4ge1xuICAgICAgLy8gRm9yIHRoZSBmaXJzdCBydW4gLi4uXG4gICAgICB0aGlzLnJlbWFpbmluZyA9IGR1cmF0aW9uO1xuXG4gICAgICAvLyBTZXR1cCwgdGhlbiBzdGFydCB0aGUgdGltZXJcbiAgICAgIHRoaXMuZmluaXNoUHJvbWlzZVJlc29sdmVyID0gcmVzb2x2ZTtcbiAgICAgIHRoaXMuY29udGludWUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXVzZSB0aGUgdGltZXJcbiAgICovXG4gIHB1YmxpYyBwYXVzZSgpOiB2b2lkIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcklkKTtcbiAgICB0aGlzLnJlbWFpbmluZyAtPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMubm93O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnRpbnVlIHRoZSB0aW1lclxuICAgKi9cbiAgcHVibGljIGNvbnRpbnVlKCk6IHZvaWQge1xuICAgIHRoaXMubm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgdGhpcy50aW1lcklkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5maW5pc2goKTtcbiAgICB9LCB0aGlzLnJlbWFpbmluZyk7XG4gIH1cblxuICAvKipcbiAgICogU3RvcCB0aGUgdGltZXJcbiAgICovXG4gIHB1YmxpYyBzdG9wKCk6IHZvaWQge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVySWQpO1xuICAgIHRoaXMucmVtYWluaW5nID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5pc2ggdXAgdGhlIHRpbWVvdXQgYnkgcmVzb2x2aW5nIHRoZSB0aW1lciBwcm9taXNlXG4gICAqL1xuICBwcml2YXRlIGZpbmlzaCgpOiB2b2lkIHtcbiAgICB0aGlzLmZpbmlzaFByb21pc2VSZXNvbHZlcigpO1xuICB9XG59XG4iXX0=