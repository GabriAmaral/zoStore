import { Injectable } from '@angular/core';
import { fade } from '../animation-presets/fade.animation-preset';
import { slide } from '../animation-presets/slide.animation-preset';
import * as i0 from "@angular/core";
/**
 * Notifier animation service
 */
export class NotifierAnimationService {
    /**
     * Constructor
     */
    constructor() {
        this.animationPresets = {
            fade,
            slide,
        };
    }
    /**
     * Get animation data
     *
     * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation
     * direction (either in or out) as well as the notifications (and its attributes) itself.
     *
     * @param   direction    Animation direction, either in or out
     * @param   notification Notification the animation data should be generated for
     * @returns Animation information
     */
    getAnimationData(direction, notification) {
        // Get all necessary animation data
        let keyframes;
        let duration;
        let easing;
        if (direction === 'show') {
            keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);
            duration = notification.component.getConfig().animations.show.speed;
            easing = notification.component.getConfig().animations.show.easing;
        }
        else {
            keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);
            duration = notification.component.getConfig().animations.hide.speed;
            easing = notification.component.getConfig().animations.hide.easing;
        }
        // Build and return animation data
        return {
            keyframes: [keyframes.from, keyframes.to],
            options: {
                duration,
                easing,
                fill: 'forwards', // Keep the newly painted state after the animation finished
            },
        };
    }
}
NotifierAnimationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NotifierAnimationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NotifierAnimationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NotifierAnimationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NotifierAnimationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItYW5pbWF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLW5vdGlmaWVyL3NyYy9saWIvc2VydmljZXMvbm90aWZpZXItYW5pbWF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDbEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDZDQUE2QyxDQUFDOztBQUlwRTs7R0FFRztBQUVILE1BQU0sT0FBTyx3QkFBd0I7SUFRbkM7O09BRUc7SUFDSDtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRztZQUN0QixJQUFJO1lBQ0osS0FBSztTQUNOLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0ksZ0JBQWdCLENBQUMsU0FBMEIsRUFBRSxZQUFrQztRQUNwRixtQ0FBbUM7UUFDbkMsSUFBSSxTQUEyQyxDQUFDO1FBQ2hELElBQUksUUFBZ0IsQ0FBQztRQUNyQixJQUFJLE1BQWMsQ0FBQztRQUNuQixJQUFJLFNBQVMsS0FBSyxNQUFNLEVBQUU7WUFDeEIsU0FBUyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ2hILFFBQVEsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ3BFLE1BQU0sR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQ3BFO2FBQU07WUFDTCxTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDaEgsUUFBUSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDcEUsTUFBTSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDcEU7UUFFRCxrQ0FBa0M7UUFDbEMsT0FBTztZQUNMLFNBQVMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUN6QyxPQUFPLEVBQUU7Z0JBQ1AsUUFBUTtnQkFDUixNQUFNO2dCQUNOLElBQUksRUFBRSxVQUFVLEVBQUUsNERBQTREO2FBQy9FO1NBQ0YsQ0FBQztJQUNKLENBQUM7O3FIQXBEVSx3QkFBd0I7eUhBQXhCLHdCQUF3QjsyRkFBeEIsd0JBQXdCO2tCQURwQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vYW5pbWF0aW9uLXByZXNldHMvZmFkZS5hbmltYXRpb24tcHJlc2V0JztcbmltcG9ydCB7IHNsaWRlIH0gZnJvbSAnLi4vYW5pbWF0aW9uLXByZXNldHMvc2xpZGUuYW5pbWF0aW9uLXByZXNldCc7XG5pbXBvcnQgeyBOb3RpZmllckFuaW1hdGlvbkRhdGEsIE5vdGlmaWVyQW5pbWF0aW9uUHJlc2V0LCBOb3RpZmllckFuaW1hdGlvblByZXNldEtleWZyYW1lcyB9IGZyb20gJy4uL21vZGVscy9ub3RpZmllci1hbmltYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgTm90aWZpZXJOb3RpZmljYXRpb24gfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsJztcblxuLyoqXG4gKiBOb3RpZmllciBhbmltYXRpb24gc2VydmljZVxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTm90aWZpZXJBbmltYXRpb25TZXJ2aWNlIHtcbiAgLyoqXG4gICAqIExpc3Qgb2YgYW5pbWF0aW9uIHByZXNldHMgKGN1cnJlbnRseSBzdGF0aWMpXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGFuaW1hdGlvblByZXNldHM6IHtcbiAgICBbYW5pbWF0aW9uUHJlc2V0TmFtZTogc3RyaW5nXTogTm90aWZpZXJBbmltYXRpb25QcmVzZXQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hbmltYXRpb25QcmVzZXRzID0ge1xuICAgICAgZmFkZSxcbiAgICAgIHNsaWRlLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuaW1hdGlvbiBkYXRhXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGdlbmVyYXRlcyBhbGwgZGF0YSB0aGUgV2ViIEFuaW1hdGlvbnMgQVBJIG5lZWRzIHRvIGFuaW1hdGUgb3VyIG5vdGlmaWNhdGlvbi4gVGhlIHJlc3VsdCBkZXBlbmRzIG9uIGJvdGggdGhlIGFuaW1hdGlvblxuICAgKiBkaXJlY3Rpb24gKGVpdGhlciBpbiBvciBvdXQpIGFzIHdlbGwgYXMgdGhlIG5vdGlmaWNhdGlvbnMgKGFuZCBpdHMgYXR0cmlidXRlcykgaXRzZWxmLlxuICAgKlxuICAgKiBAcGFyYW0gICBkaXJlY3Rpb24gICAgQW5pbWF0aW9uIGRpcmVjdGlvbiwgZWl0aGVyIGluIG9yIG91dFxuICAgKiBAcGFyYW0gICBub3RpZmljYXRpb24gTm90aWZpY2F0aW9uIHRoZSBhbmltYXRpb24gZGF0YSBzaG91bGQgYmUgZ2VuZXJhdGVkIGZvclxuICAgKiBAcmV0dXJucyBBbmltYXRpb24gaW5mb3JtYXRpb25cbiAgICovXG4gIHB1YmxpYyBnZXRBbmltYXRpb25EYXRhKGRpcmVjdGlvbjogJ3Nob3cnIHwgJ2hpZGUnLCBub3RpZmljYXRpb246IE5vdGlmaWVyTm90aWZpY2F0aW9uKTogTm90aWZpZXJBbmltYXRpb25EYXRhIHtcbiAgICAvLyBHZXQgYWxsIG5lY2Vzc2FyeSBhbmltYXRpb24gZGF0YVxuICAgIGxldCBrZXlmcmFtZXM6IE5vdGlmaWVyQW5pbWF0aW9uUHJlc2V0S2V5ZnJhbWVzO1xuICAgIGxldCBkdXJhdGlvbjogbnVtYmVyO1xuICAgIGxldCBlYXNpbmc6IHN0cmluZztcbiAgICBpZiAoZGlyZWN0aW9uID09PSAnc2hvdycpIHtcbiAgICAgIGtleWZyYW1lcyA9IHRoaXMuYW5pbWF0aW9uUHJlc2V0c1tub3RpZmljYXRpb24uY29tcG9uZW50LmdldENvbmZpZygpLmFuaW1hdGlvbnMuc2hvdy5wcmVzZXRdLnNob3cobm90aWZpY2F0aW9uKTtcbiAgICAgIGR1cmF0aW9uID0gbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRDb25maWcoKS5hbmltYXRpb25zLnNob3cuc3BlZWQ7XG4gICAgICBlYXNpbmcgPSBub3RpZmljYXRpb24uY29tcG9uZW50LmdldENvbmZpZygpLmFuaW1hdGlvbnMuc2hvdy5lYXNpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleWZyYW1lcyA9IHRoaXMuYW5pbWF0aW9uUHJlc2V0c1tub3RpZmljYXRpb24uY29tcG9uZW50LmdldENvbmZpZygpLmFuaW1hdGlvbnMuaGlkZS5wcmVzZXRdLmhpZGUobm90aWZpY2F0aW9uKTtcbiAgICAgIGR1cmF0aW9uID0gbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRDb25maWcoKS5hbmltYXRpb25zLmhpZGUuc3BlZWQ7XG4gICAgICBlYXNpbmcgPSBub3RpZmljYXRpb24uY29tcG9uZW50LmdldENvbmZpZygpLmFuaW1hdGlvbnMuaGlkZS5lYXNpbmc7XG4gICAgfVxuXG4gICAgLy8gQnVpbGQgYW5kIHJldHVybiBhbmltYXRpb24gZGF0YVxuICAgIHJldHVybiB7XG4gICAgICBrZXlmcmFtZXM6IFtrZXlmcmFtZXMuZnJvbSwga2V5ZnJhbWVzLnRvXSxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIGVhc2luZyxcbiAgICAgICAgZmlsbDogJ2ZvcndhcmRzJywgLy8gS2VlcCB0aGUgbmV3bHkgcGFpbnRlZCBzdGF0ZSBhZnRlciB0aGUgYW5pbWF0aW9uIGZpbmlzaGVkXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cbiJdfQ==