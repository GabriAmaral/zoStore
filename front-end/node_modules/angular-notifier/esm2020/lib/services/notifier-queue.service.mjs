import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Notifier queue service
 *
 * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls
 * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -
 * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and
 * processes them at the right time (which is when the previous action has been processed successfully).
 *
 * Technical sidenote:
 * An action looks pretty similar to the ones within the Flux / Redux pattern.
 */
export class NotifierQueueService {
    /**
     * Constructor
     */
    constructor() {
        this.actionStream = new Subject();
        this.actionQueue = [];
        this.isActionInProgress = false;
    }
    /**
     * Push a new action to the queue, and try to run it
     *
     * @param action Action object
     */
    push(action) {
        this.actionQueue.push(action);
        this.tryToRunNextAction();
    }
    /**
     * Continue with the next action (called when the current action is finished)
     */
    continue() {
        this.isActionInProgress = false;
        this.tryToRunNextAction();
    }
    /**
     * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left
     */
    tryToRunNextAction() {
        if (this.isActionInProgress || this.actionQueue.length === 0) {
            return; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)
        }
        this.isActionInProgress = true;
        this.actionStream.next(this.actionQueue.shift()); // Push next action to the stream, and remove the current action from the queue
    }
}
NotifierQueueService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NotifierQueueService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NotifierQueueService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NotifierQueueService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.1", ngImport: i0, type: NotifierQueueService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItcXVldWUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbm90aWZpZXIvc3JjL2xpYi9zZXJ2aWNlcy9ub3RpZmllci1xdWV1ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFJL0I7Ozs7Ozs7Ozs7R0FVRztBQUVILE1BQU0sT0FBTyxvQkFBb0I7SUFnQi9COztPQUVHO0lBQ0g7UUFDRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksT0FBTyxFQUFrQixDQUFDO1FBQ2xELElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7SUFDbEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxJQUFJLENBQUMsTUFBc0I7UUFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksUUFBUTtRQUNiLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7UUFDaEMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVEOztPQUVHO0lBQ0ssa0JBQWtCO1FBQ3hCLElBQUksSUFBSSxDQUFDLGtCQUFrQixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1RCxPQUFPLENBQUMsNkVBQTZFO1NBQ3RGO1FBQ0QsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQywrRUFBK0U7SUFDbkksQ0FBQzs7aUhBcERVLG9CQUFvQjtxSEFBcEIsb0JBQW9COzJGQUFwQixvQkFBb0I7a0JBRGhDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IE5vdGlmaWVyQWN0aW9uIH0gZnJvbSAnLi4vbW9kZWxzL25vdGlmaWVyLWFjdGlvbi5tb2RlbCc7XG5cbi8qKlxuICogTm90aWZpZXIgcXVldWUgc2VydmljZVxuICpcbiAqIEluIGdlbmVyYWwsIEFQSSBjYWxscyBkb24ndCBnZXQgcHJvY2Vzc2VkIHJpZ2h0IGF3YXkuIEluc3RlYWQsIHdlIGhhdmUgdG8gcXVldWUgdGhlbSB1cCBpbiBvcmRlciB0byBwcmV2ZW50IHNpbXVsdGFuaW91cyBBUEkgY2FsbHNcbiAqIGludGVyZmVyaW5nIHdpdGggZWFjaCBvdGhlci4gVGhpcywgYXQgbGVhc3QgaW4gdGhlb3J5LCBpcyBwb3NzaWJsZSBhdCBhbnkgdGltZS4gSW4gcGFydGljdWxhciwgYW5pbWF0aW9ucyAtIHdoaWNoIHBvdGVudGlhbGx5IG92ZXJsYXAgLVxuICogY2FuIGNhdXNlIGNoYW5nZXMgaW4gSlMgY2xhc3NlcyBhcyB3ZWxsIGFzIGFmZmVjdCB0aGUgRE9NLiBUaGVyZWZvcmUsIHRoZSBxdWV1ZSBzZXJ2aWNlIHRha2VzIGFsbCBhY3Rpb25zLCBwdXRzIHRoZW0gaW4gYSBxdWV1ZSwgYW5kXG4gKiBwcm9jZXNzZXMgdGhlbSBhdCB0aGUgcmlnaHQgdGltZSAod2hpY2ggaXMgd2hlbiB0aGUgcHJldmlvdXMgYWN0aW9uIGhhcyBiZWVuIHByb2Nlc3NlZCBzdWNjZXNzZnVsbHkpLlxuICpcbiAqIFRlY2huaWNhbCBzaWRlbm90ZTpcbiAqIEFuIGFjdGlvbiBsb29rcyBwcmV0dHkgc2ltaWxhciB0byB0aGUgb25lcyB3aXRoaW4gdGhlIEZsdXggLyBSZWR1eCBwYXR0ZXJuLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTm90aWZpZXJRdWV1ZVNlcnZpY2Uge1xuICAvKipcbiAgICogU3RyZWFtIG9mIGFjdGlvbnMsIHN1YnNjcmliYWJsZSBmcm9tIG91dHNpZGVcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBhY3Rpb25TdHJlYW06IFN1YmplY3Q8Tm90aWZpZXJBY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBRdWV1ZSBvZiBhY3Rpb25zXG4gICAqL1xuICBwcml2YXRlIGFjdGlvblF1ZXVlOiBBcnJheTxOb3RpZmllckFjdGlvbj47XG5cbiAgLyoqXG4gICAqIEZsYWcsIHRydWUgaWYgc29tZSBhY3Rpb24gaXMgY3VycmVudGx5IGluIHByb2dyZXNzXG4gICAqL1xuICBwcml2YXRlIGlzQWN0aW9uSW5Qcm9ncmVzczogYm9vbGVhbjtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmFjdGlvblN0cmVhbSA9IG5ldyBTdWJqZWN0PE5vdGlmaWVyQWN0aW9uPigpO1xuICAgIHRoaXMuYWN0aW9uUXVldWUgPSBbXTtcbiAgICB0aGlzLmlzQWN0aW9uSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1c2ggYSBuZXcgYWN0aW9uIHRvIHRoZSBxdWV1ZSwgYW5kIHRyeSB0byBydW4gaXRcbiAgICpcbiAgICogQHBhcmFtIGFjdGlvbiBBY3Rpb24gb2JqZWN0XG4gICAqL1xuICBwdWJsaWMgcHVzaChhY3Rpb246IE5vdGlmaWVyQWN0aW9uKTogdm9pZCB7XG4gICAgdGhpcy5hY3Rpb25RdWV1ZS5wdXNoKGFjdGlvbik7XG4gICAgdGhpcy50cnlUb1J1bk5leHRBY3Rpb24oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb250aW51ZSB3aXRoIHRoZSBuZXh0IGFjdGlvbiAoY2FsbGVkIHdoZW4gdGhlIGN1cnJlbnQgYWN0aW9uIGlzIGZpbmlzaGVkKVxuICAgKi9cbiAgcHVibGljIGNvbnRpbnVlKCk6IHZvaWQge1xuICAgIHRoaXMuaXNBY3Rpb25JblByb2dyZXNzID0gZmFsc2U7XG4gICAgdGhpcy50cnlUb1J1bk5leHRBY3Rpb24oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcnkgdG8gcnVuIHRoZSBuZXh0IGFjdGlvbiBpbiB0aGUgcXVldWU7IHdlIHNraXAgaWYgdGhlcmUgYWxyZWFkeSBpcyBzb21lIGFjdGlvbiBpbiBwcm9ncmVzcywgb3IgaWYgdGhlcmUgaXMgbm8gYWN0aW9uIGxlZnRcbiAgICovXG4gIHByaXZhdGUgdHJ5VG9SdW5OZXh0QWN0aW9uKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzQWN0aW9uSW5Qcm9ncmVzcyB8fCB0aGlzLmFjdGlvblF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuOyAvLyBTa2lwICh0aGUgcXVldWUgY2FuIG5vdyBnbyBkcmluayBhIGNvZmZlZSBhcyBpdCBoYXMgbm90aGluZyB0byBkbyBhbnltb3JlKVxuICAgIH1cbiAgICB0aGlzLmlzQWN0aW9uSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgdGhpcy5hY3Rpb25TdHJlYW0ubmV4dCh0aGlzLmFjdGlvblF1ZXVlLnNoaWZ0KCkpOyAvLyBQdXNoIG5leHQgYWN0aW9uIHRvIHRoZSBzdHJlYW0sIGFuZCByZW1vdmUgdGhlIGN1cnJlbnQgYWN0aW9uIGZyb20gdGhlIHF1ZXVlXG4gIH1cbn1cbiJdfQ==