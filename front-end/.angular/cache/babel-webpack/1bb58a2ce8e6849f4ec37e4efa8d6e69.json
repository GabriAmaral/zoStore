{"ast":null,"code":"import { EventEmitter, Component, ChangeDetectorRef, ElementRef, Input, Output, Injectable, ComponentFactoryResolver, ApplicationRef, Injector, ɵɵdefineInjectable, ɵɵinject, INJECTOR, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction NgxNotificationMsgComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 15);\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\");\n    ɵngcc0.ɵɵelement(2, \"use\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵattribute(\"href\", \"#\" + ctx_r0.status, null, \"xlink\");\n  }\n}\n\nfunction NgxNotificationMsgComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 16);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.msgs, \" \");\n  }\n}\n\nfunction NgxNotificationMsgComponent_div_6_ul_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"ul\");\n    ɵngcc0.ɵɵelementStart(1, \"li\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const msg_r5 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(msg_r5);\n  }\n}\n\nfunction NgxNotificationMsgComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 16);\n    ɵngcc0.ɵɵtemplate(1, NgxNotificationMsgComponent_div_6_ul_1_Template, 3, 1, \"ul\", 17);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r2.msgs);\n  }\n}\n\nfunction NgxNotificationMsgComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 18);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxNotificationMsgComponent_button_7_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.close();\n    });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\");\n    ɵngcc0.ɵɵelement(2, \"use\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵattribute(\"href\", \"#clear\", null, \"xlink\");\n  }\n}\n\nlet NgxNotificationMsgComponent = /*#__PURE__*/(() => {\n  class NgxNotificationMsgComponent {\n    /**\n     * @param {?} cd\n     * @param {?} element\n     */\n    constructor(cd, element) {\n      this.cd = cd;\n      this.element = element;\n      this.status = NgxNotificationStatusMsg.NONE;\n      this.direction = NgxNotificationDirection.TOP;\n      this.displayProgressBar = true;\n      this.displayIcon = true;\n      this.delay = 3000;\n      this.closeable = true;\n      this.destroy = new EventEmitter();\n      this.componentState = NgxNotificationMsgComponentState.CLOSE;\n      this.componentStates = NgxNotificationMsgComponentState;\n      this.statusToColor = {\n        [NgxNotificationStatusMsg.NONE]: '',\n        [NgxNotificationStatusMsg.INFO]: '#0067FF',\n        [NgxNotificationStatusMsg.FAILURE]: '#FE355A',\n        [NgxNotificationStatusMsg.SUCCESS]: '#00CC69'\n      };\n      this.msgs = [];\n      this.NONE = 'NONE';\n    }\n    /**\n     * @param {?} messages\n     * @return {?}\n     */\n\n\n    set messages(messages) {\n      this.msgs = [...messages];\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this.init();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewInit() {\n      setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        this.componentState = NgxNotificationMsgComponentState.OPEN;\n        this.cd.markForCheck();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    isNotificationMsgOpened() {\n      return this.componentState === this.componentStates.OPEN;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    isProgressBarDisplayed() {\n      return this.status !== this.NONE && this.displayProgressBar;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    isIconDisplayed() {\n      return this.status !== this.NONE && this.displayIcon;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getPosition() {\n      return Object.assign({}, this.getDefaultPosition(), this.componentState === this.componentStates.OPEN && this.getDynamicPosition());\n    }\n    /**\n     * @return {?}\n     */\n\n\n    mouseEnter() {\n      this.mouseEnterTimestamp = performance.now();\n      clearTimeout(this.closeTimeout);\n      clearTimeout(this.destroyTimeout);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    mouseLeave() {\n      /** @type {?} */\n      const timestampGap = this.mouseEnterTimestamp - this.referencePointTimestamp;\n      this.autoSelfDestroy(this.delay - timestampGap);\n      this.referencePointTimestamp = performance.now() - timestampGap;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    close() {\n      this.componentState = NgxNotificationMsgComponentState.CLOSE;\n      setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        this.destroy.emit();\n      }, NgxNotificationMsgComponent.DELAY_ON_CLICK);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    init() {\n      this.referencePointTimestamp = performance.now();\n      this.initTheme();\n      this.autoSelfDestroy(this.delay);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    initTheme() {\n      this.element.nativeElement.style.setProperty('--ngx-notification-msg-delay', `${this.delay}ms`);\n      this.element.nativeElement.style.setProperty('--ngx-notification-msg-color', this.color || this.statusToColor[this.status]);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    getDefaultPosition() {\n      switch (this.direction) {\n        case NgxNotificationDirection.TOP:\n          return {\n            top: '0',\n            right: '50%',\n            transform: `translate(50%, -100%)`\n          };\n\n        case NgxNotificationDirection.TOP_RIGHT:\n          return {\n            top: '0',\n            right: '20px',\n            transform: `translateY(-100%)`\n          };\n\n        case NgxNotificationDirection.TOP_LEFT:\n          return {\n            top: '0',\n            left: '20px',\n            transform: `translateY(-100%)`\n          };\n\n        case NgxNotificationDirection.BOTTOM:\n          return {\n            bottom: '0',\n            right: '50%',\n            transform: `translateX(50%)`\n          };\n\n        case NgxNotificationDirection.BOTTOM_RIGHT:\n          return {\n            bottom: '0',\n            right: '20px',\n            transform: `translateY(100%)`\n          };\n\n        case NgxNotificationDirection.BOTTOM_LEFT:\n          return {\n            bottom: '0',\n            left: '20px',\n            transform: `translateY(100%)`\n          };\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    getDynamicPosition() {\n      /** @type {?} */\n      const top = `calc(${100 * this.index}% + ${20 * (this.index + 1)}px)`;\n      /** @type {?} */\n\n      const bottom = `calc(${-100 * this.index}% + ${-20 * (this.index + 1)}px)`;\n\n      switch (this.direction) {\n        case NgxNotificationDirection.TOP:\n          return {\n            transform: `translate(50%, ${top})`\n          };\n\n        case NgxNotificationDirection.TOP_RIGHT:\n          return {\n            transform: `translateY(${top})`\n          };\n\n        case NgxNotificationDirection.TOP_LEFT:\n          return {\n            transform: `translateY(${top})`\n          };\n\n        case NgxNotificationDirection.BOTTOM:\n          return {\n            transform: `translate(50%, ${bottom})`\n          };\n\n        case NgxNotificationDirection.BOTTOM_RIGHT:\n          return {\n            transform: `translateY(${bottom})`\n          };\n\n        case NgxNotificationDirection.BOTTOM_LEFT:\n          return {\n            transform: `translateY(${bottom})`\n          };\n      }\n    }\n    /**\n     * @private\n     * @param {?} delay\n     * @return {?}\n     */\n\n\n    autoSelfDestroy(delay) {\n      this.closeTimeout = setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        this.componentState = NgxNotificationMsgComponentState.CLOSE;\n        this.cd.markForCheck();\n      }, delay);\n      this.destroyTimeout = setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        this.destroy.emit();\n      }, delay + NgxNotificationMsgComponent.DELAY_ON_CLICK);\n    }\n\n  }\n\n  NgxNotificationMsgComponent.ɵfac = function NgxNotificationMsgComponent_Factory(t) {\n    return new (t || NgxNotificationMsgComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NgxNotificationMsgComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgxNotificationMsgComponent,\n    selectors: [[\"ngx-notification-msg\"]],\n    inputs: {\n      status: \"status\",\n      direction: \"direction\",\n      displayProgressBar: \"displayProgressBar\",\n      displayIcon: \"displayIcon\",\n      delay: \"delay\",\n      closeable: \"closeable\",\n      messages: \"messages\",\n      header: \"header\",\n      color: \"color\",\n      index: \"index\"\n    },\n    outputs: {\n      destroy: \"destroy\"\n    },\n    decls: 20,\n    vars: 10,\n    consts: [[1, \"ngx_notification-msg\", 3, \"ngStyle\", \"mouseenter\", \"mouseleave\"], [\"class\", \"ngx_notification-msg-icon-wrapper\", 4, \"ngIf\"], [1, \"ngx_notification-msg-content\"], [1, \"ngx_notification-msg-header\"], [\"class\", \"ngx_notification-msg-body\", 4, \"ngIf\"], [\"class\", \"ngx_notification-msg-close-button\", 3, \"click\", 4, \"ngIf\"], [\"display\", \"none\"], [\"width\", \"24\", \"height\", \"24\", \"viewBox\", \"0 0 32 32\", \"id\", \"SUCCESS\"], [\"d\", \"M16,0 C24.836556,0 32,7.163444 32,16 C32,24.836556 24.836556,32 16,32 C7.163444,32 0,24.836556 0,16 C0,7.163444 7.163444,0 16,0 Z M23.6,9.6 L13,20.2 L8.8,16 L7.4,17.4 L13,23 L25,11 L23.6,9.6 Z\"], [\"width\", \"24\", \"height\", \"24\", \"viewBox\", \"0 0 32 32\", \"id\", \"FAILURE\"], [\"d\", \"M16,0 C24.836556,0 32,7.163444 32,16 C32,24.836556 24.836556,32 16,32 C7.163444,32 0,24.836556 0,16 C0,7.163444 7.163444,0 16,0 Z M21.59,9 L16,14.59 L10.41,9 L9,10.41 L14.59,16 L9,21.59 L10.41,23 L16,17.41 L21.59,23 L23,21.59 L17.41,16 L23,10.41 L21.59,9 Z\"], [\"width\", \"24\", \"height\", \"24\", \"viewBox\", \"0 0 32 32\", \"id\", \"INFO\"], [\"d\", \"M16,0 C24.836556,0 32,7.163444 32,16 C32,24.836556 24.836556,32 16,32 C7.163444,32 0,24.836556 0,16 C0,7.163444 7.163444,0 16,0 Z M17,12 L15,12 L15,24 L17,24 L17,12 Z M17,8 L15,8 L15,10 L17,10 L17,8 Z\"], [\"viewBox\", \"0 0 24 24\", \"id\", \"clear\"], [\"d\", \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"], [1, \"ngx_notification-msg-icon-wrapper\"], [1, \"ngx_notification-msg-body\"], [4, \"ngFor\", \"ngForOf\"], [1, \"ngx_notification-msg-close-button\", 3, \"click\"]],\n    template: function NgxNotificationMsgComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"mouseenter\", function NgxNotificationMsgComponent_Template_div_mouseenter_0_listener() {\n          return ctx.mouseEnter();\n        })(\"mouseleave\", function NgxNotificationMsgComponent_Template_div_mouseleave_0_listener() {\n          return ctx.mouseLeave();\n        });\n        ɵngcc0.ɵɵtemplate(1, NgxNotificationMsgComponent_div_1_Template, 3, 1, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n        ɵngcc0.ɵɵtext(4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(5, NgxNotificationMsgComponent_div_5_Template, 2, 1, \"div\", 4);\n        ɵngcc0.ɵɵtemplate(6, NgxNotificationMsgComponent_div_6_Template, 2, 1, \"div\", 4);\n        ɵngcc0.ɵɵtemplate(7, NgxNotificationMsgComponent_button_7_Template, 3, 1, \"button\", 5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(8, \"svg\", 6);\n        ɵngcc0.ɵɵelementStart(9, \"symbol\", 7);\n        ɵngcc0.ɵɵelement(10, \"path\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"svg\", 6);\n        ɵngcc0.ɵɵelementStart(12, \"symbol\", 9);\n        ɵngcc0.ɵɵelement(13, \"path\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(14, \"svg\", 6);\n        ɵngcc0.ɵɵelementStart(15, \"symbol\", 11);\n        ɵngcc0.ɵɵelement(16, \"path\", 12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(17, \"svg\", 6);\n        ɵngcc0.ɵɵelementStart(18, \"symbol\", 13);\n        ɵngcc0.ɵɵelement(19, \"path\", 14);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ngx_notification-msg-opened\", ctx.isNotificationMsgOpened())(\"ngx_notification-msg-progress-bar\", ctx.isProgressBarDisplayed());\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.getPosition());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isIconDisplayed());\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.header, \" \");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", (ctx.msgs == null ? null : ctx.msgs.length) === 1);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", (ctx.msgs == null ? null : ctx.msgs.length) > 1);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.closeable);\n      }\n    },\n    directives: [ɵngcc1.NgStyle, ɵngcc1.NgIf, ɵngcc1.NgForOf],\n    styles: [\"[_ngcontent-%COMP%]:root{--ngx-notification-msg-delay:0;--ngx-notification-msg-color:none}.ngx_notification-msg[_ngcontent-%COMP%]{position:absolute;display:-webkit-box;display:flex;opacity:0;box-shadow:0 10px 19px 10px rgba(0,0,0,.04);border-radius:4px;background-color:#fff;font-family:Raleway,Arial,sans-serif;-webkit-transition:.2s cubic-bezier(.75,0,.75,.9);transition:.2s cubic-bezier(.75,0,.75,.9)}.ngx_notification-msg[_ngcontent-%COMP%]:hover::after{-webkit-animation-play-state:paused;animation-play-state:paused}.ngx_notification-msg-opened[_ngcontent-%COMP%]{opacity:1;-webkit-transition:250ms cubic-bezier(.2,0,.25,1);transition:250ms cubic-bezier(.2,0,.25,1)}.ngx_notification-msg-progress-bar[_ngcontent-%COMP%]::before{content:'';height:4px;width:100%;position:absolute;bottom:0;opacity:.3;border-bottom-left-radius:4px;border-bottom-right-radius:4px;background-color:var(--ngx-notification-msg-color)}.ngx_notification-msg-progress-bar[_ngcontent-%COMP%]::after{content:'';height:4px;position:absolute;bottom:0;border-bottom-left-radius:4px;background-color:var(--ngx-notification-msg-color);-webkit-animation:change-width var(--ngx-notification-msg-delay);animation:change-width var(--ngx-notification-msg-delay)}.ngx_notification-msg-icon-wrapper[_ngcontent-%COMP%]{width:81px;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center;justify-items:center;position:relative}.ngx_notification-msg-icon-wrapper[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]{height:24px;width:24px;color:var(--ngx-notification-msg-color);fill:currentColor;-webkit-transform:scale(1.167);transform:scale(1.167)}.ngx_notification-msg-icon-wrapper[_ngcontent-%COMP%]::after{content:'';height:calc(100% - 40px);width:1px;position:absolute;right:0;border-bottom-left-radius:4px;border-top-left-radius:4px;background-color:#f1f1f2}.ngx_notification-msg-content[_ngcontent-%COMP%]{padding:20px 30px}.ngx_notification-msg-header[_ngcontent-%COMP%]{line-height:1.5;font-size:15px;font-weight:700;color:#565154}.ngx_notification-msg-body[_ngcontent-%COMP%]{line-height:1.5;font-size:13px;color:#93908c}.ngx_notification-msg-body[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]{margin:8px 0;padding:0 0 0 30px}.ngx_notification-msg-body[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]:last-of-type{margin:8px 0 0}.ngx_notification-msg-close-button[_ngcontent-%COMP%]{height:16px;width:16px;position:absolute;top:8px;right:8px;outline:0;padding:0;font-size:11px;font-weight:600;background-color:transparent;cursor:pointer;box-sizing:content-box;border-radius:50%;border:0}.ngx_notification-msg-close-button[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]{color:#717075;fill:currentColor;height:inherit;width:inherit}.ngx_notification-msg-close-button[_ngcontent-%COMP%]:active{-webkit-animation:.1s close-click;animation:.1s close-click}@-webkit-keyframes change-width{0%{width:100%;border-bottom-right-radius:4px}100%{width:0;border-bottom-right-radius:0}}@keyframes change-width{0%{width:100%;border-bottom-right-radius:4px}100%{width:0;border-bottom-right-radius:0}}@-webkit-keyframes close-click{0%{border:0 solid #f1f1f2}100%{border:10px solid #f1f1f2;margin-top:-10px;margin-right:-10px}}@keyframes close-click{0%{border:0 solid #f1f1f2}100%{border:10px solid #f1f1f2;margin-top:-10px;margin-right:-10px}}\"]\n  });\n  NgxNotificationMsgComponent.DELAY_ON_CLICK = 400;\n  /** @nocollapse */\n\n  return NgxNotificationMsgComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  NgxNotificationMsgComponent.DELAY_ON_CLICK;\n  /** @type {?} */\n\n  NgxNotificationMsgComponent.prototype.status;\n  /** @type {?} */\n\n  NgxNotificationMsgComponent.prototype.direction;\n  /** @type {?} */\n\n  NgxNotificationMsgComponent.prototype.displayProgressBar;\n  /** @type {?} */\n\n  NgxNotificationMsgComponent.prototype.displayIcon;\n  /** @type {?} */\n\n  NgxNotificationMsgComponent.prototype.header;\n  /** @type {?} */\n\n  NgxNotificationMsgComponent.prototype.color;\n  /** @type {?} */\n\n  NgxNotificationMsgComponent.prototype.delay;\n  /** @type {?} */\n\n  NgxNotificationMsgComponent.prototype.closeable;\n  /** @type {?} */\n\n  NgxNotificationMsgComponent.prototype.index;\n  /** @type {?} */\n\n  NgxNotificationMsgComponent.prototype.destroy;\n  /** @type {?} */\n\n  NgxNotificationMsgComponent.prototype.componentState;\n  /** @type {?} */\n\n  NgxNotificationMsgComponent.prototype.componentStates;\n  /** @type {?} */\n\n  NgxNotificationMsgComponent.prototype.statusToColor;\n  /** @type {?} */\n\n  NgxNotificationMsgComponent.prototype.msgs;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxNotificationMsgComponent.prototype.NONE;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxNotificationMsgComponent.prototype.closeTimeout;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxNotificationMsgComponent.prototype.destroyTimeout;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxNotificationMsgComponent.prototype.referencePointTimestamp;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxNotificationMsgComponent.prototype.mouseEnterTimestamp;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxNotificationMsgComponent.prototype.cd;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxNotificationMsgComponent.prototype.element;\n}\n/**\n * @record\n */\n\n\nfunction INgxNotificationPosition() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  INgxNotificationPosition.prototype.top;\n  /** @type {?|undefined} */\n\n  INgxNotificationPosition.prototype.bottom;\n  /** @type {?|undefined} */\n\n  INgxNotificationPosition.prototype.left;\n  /** @type {?|undefined} */\n\n  INgxNotificationPosition.prototype.right;\n  /** @type {?} */\n\n  INgxNotificationPosition.prototype.transform;\n}\n/** @enum {string} */\n\n\nconst NgxNotificationMsgComponentState = {\n  CLOSE: 'CLOSE',\n  OPEN: 'OPEN'\n};\n/** @enum {string} */\n\nconst NgxNotificationStatusMsg = {\n  SUCCESS: 'SUCCESS',\n  FAILURE: 'FAILURE',\n  INFO: 'INFO',\n  NONE: 'NONE'\n};\n/** @enum {string} */\n\nconst NgxNotificationDirection = {\n  TOP: 'TOP',\n  TOP_RIGHT: 'TOP_RIGHT',\n  TOP_LEFT: 'TOP_LEFT',\n  BOTTOM: 'BOTTOM',\n  BOTTOM_RIGHT: 'BOTTOM_RIGHT',\n  BOTTOM_LEFT: 'BOTTOM_LEFT'\n};\n/**\n * @record\n */\n\nfunction INgxNotificationMsgConfig() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  INgxNotificationMsgConfig.prototype.status;\n  /** @type {?|undefined} */\n\n  INgxNotificationMsgConfig.prototype.direction;\n  /** @type {?|undefined} */\n\n  INgxNotificationMsgConfig.prototype.header;\n  /** @type {?} */\n\n  INgxNotificationMsgConfig.prototype.messages;\n  /** @type {?|undefined} */\n\n  INgxNotificationMsgConfig.prototype.color;\n  /** @type {?|undefined} */\n\n  INgxNotificationMsgConfig.prototype.delay;\n  /** @type {?|undefined} */\n\n  INgxNotificationMsgConfig.prototype.displayIcon;\n  /** @type {?|undefined} */\n\n  INgxNotificationMsgConfig.prototype.displayProgressBar;\n  /** @type {?|undefined} */\n\n  INgxNotificationMsgConfig.prototype.closeable;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass NgxNotificationMsgService {\n  /**\n   * @param {?} componentFactoryResolver\n   * @param {?} appRef\n   * @param {?} injector\n   */\n  constructor(componentFactoryResolver, appRef, injector) {\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.appRef = appRef;\n    this.injector = injector;\n    this.defaultContainer = document.querySelector('body');\n    this.containerToChildComponentsRef = new Map();\n  }\n  /**\n   * @private\n   * @param {?} componentFactoryResolver\n   * @param {?} appRef\n   * @param {?} injector\n   * @param {?} container\n   * @return {?}\n   */\n\n\n  static appendChildComponentRef(componentFactoryResolver, appRef, injector, container) {\n    /** @type {?} */\n    const childComponentRef = componentFactoryResolver.resolveComponentFactory(NgxNotificationMsgComponent).create(injector);\n    /** @type {?} */\n\n    const childDomElem =\n    /** @type {?} */\n\n    /** @type {?} */\n    childComponentRef.hostView.rootNodes[0];\n    appRef.attachView(childComponentRef.hostView);\n    container.appendChild(childDomElem);\n    return childComponentRef;\n  }\n  /**\n   * @private\n   * @param {?} inputsConfig\n   * @param {?} componentRef\n   * @return {?}\n   */\n\n\n  static attachConfig(inputsConfig, componentRef) {\n    Object.keys(inputsConfig).forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => {\n      componentRef.instance[key] = inputsConfig[key];\n    });\n  }\n  /**\n   * @private\n   * @param {?} container\n   * @param {?} containerToChildComponentsRef\n   * @param {?} childComponentRef\n   * @return {?}\n   */\n\n\n  static addChildComponentRef(container, containerToChildComponentsRef, childComponentRef) {\n    if (containerToChildComponentsRef.has(container)) {\n      containerToChildComponentsRef.get(container).push(childComponentRef);\n    } else {\n      containerToChildComponentsRef.set(container, [childComponentRef]);\n    }\n  }\n  /**\n   * @private\n   * @param {?} appRef\n   * @param {?} containerToChildComponentsRef\n   * @param {?} componentRef\n   * @return {?}\n   */\n\n\n  static subscribeToComponentDestroyEvent(appRef, containerToChildComponentsRef, componentRef) {\n    /** @type {?} */\n    const sub = componentRef.instance.destroy.subscribe(\n    /**\n    * @return {?}\n    */\n    () => {\n      sub.unsubscribe();\n      NgxNotificationMsgService.destroy(appRef, componentRef);\n      NgxNotificationMsgService.removeChildComponentRef(containerToChildComponentsRef, componentRef);\n      NgxNotificationMsgService.updateComponentsIndexesOnDestroy(containerToChildComponentsRef);\n    });\n  }\n  /**\n   * @private\n   * @param {?} appRef\n   * @param {?} componentRef\n   * @return {?}\n   */\n\n\n  static destroy(appRef, componentRef) {\n    appRef.detachView(componentRef.hostView);\n    componentRef.destroy();\n  }\n  /**\n   * @private\n   * @param {?} containerToChildComponentsRef\n   * @return {?}\n   */\n\n\n  static updateComponentsIndexesOnDestroy(containerToChildComponentsRef) {\n    containerToChildComponentsRef.forEach(\n    /**\n    * @param {?} value\n    * @param {?} key\n    * @return {?}\n    */\n    (value, key) => {\n      /** @type {?} */\n      let total = containerToChildComponentsRef.get(key).length - 1;\n      containerToChildComponentsRef.get(key).forEach(\n      /**\n      * @param {?} __0\n      * @return {?}\n      */\n      ({\n        instance\n      }) => {\n        instance.index = total--;\n      });\n    });\n  }\n  /**\n   * @private\n   * @param {?} containerToChildComponentsRef\n   * @param {?} componentRef\n   * @return {?}\n   */\n\n\n  static removeChildComponentRef(containerToChildComponentsRef, componentRef) {\n    containerToChildComponentsRef.forEach(\n    /**\n    * @param {?} value\n    * @param {?} key\n    * @return {?}\n    */\n    (value, key) => {\n      containerToChildComponentsRef.set(key, [...containerToChildComponentsRef.get(key).filter(\n      /**\n      * @param {?} _\n      * @return {?}\n      */\n      _ => _ !== componentRef)]);\n    });\n  }\n  /**\n   * @private\n   * @param {?} containerToChildComponentsRef\n   * @return {?}\n   */\n\n\n  static updateComponentsIndexesOnOpen(containerToChildComponentsRef) {\n    containerToChildComponentsRef.forEach(\n    /**\n    * @param {?} value\n    * @param {?} key\n    * @return {?}\n    */\n    (value, key) => {\n      /** @type {?} */\n      let total = containerToChildComponentsRef.get(key).length;\n      containerToChildComponentsRef.get(key).forEach(\n      /**\n      * @param {?} __0\n      * @return {?}\n      */\n      ({\n        instance\n      }) => {\n        instance.index = --total;\n      });\n    });\n  }\n  /**\n   * @param {?} inputsConfig\n   * @param {?=} element\n   * @return {?}\n   */\n\n\n  open(inputsConfig, element) {\n    /** @type {?} */\n    const container = element ? element : this.defaultContainer;\n    /** @type {?} */\n\n    const childComponentRef = NgxNotificationMsgService.appendChildComponentRef(this.componentFactoryResolver, this.appRef, this.injector, container);\n    NgxNotificationMsgService.attachConfig(inputsConfig, childComponentRef);\n    NgxNotificationMsgService.addChildComponentRef(container, this.containerToChildComponentsRef, childComponentRef);\n    NgxNotificationMsgService.subscribeToComponentDestroyEvent(this.appRef, this.containerToChildComponentsRef, childComponentRef);\n    NgxNotificationMsgService.updateComponentsIndexesOnOpen(this.containerToChildComponentsRef);\n  }\n\n}\n\nNgxNotificationMsgService.ɵfac = function NgxNotificationMsgService_Factory(t) {\n  return new (t || NgxNotificationMsgService)(ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n};\n\nNgxNotificationMsgService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: NgxNotificationMsgService,\n  factory: NgxNotificationMsgService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nNgxNotificationMsgService.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function NgxNotificationMsgService_Factory() {\n    return new NgxNotificationMsgService(ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationRef), ɵɵinject(INJECTOR));\n  },\n  token: NgxNotificationMsgService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  NgxNotificationMsgService.prototype.defaultContainer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxNotificationMsgService.prototype.containerToChildComponentsRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxNotificationMsgService.prototype.componentFactoryResolver;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxNotificationMsgService.prototype.appRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxNotificationMsgService.prototype.injector;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet NgxNotificationMsgModule = /*#__PURE__*/(() => {\n  class NgxNotificationMsgModule {}\n\n  NgxNotificationMsgModule.ɵfac = function NgxNotificationMsgModule_Factory(t) {\n    return new (t || NgxNotificationMsgModule)();\n  };\n\n  NgxNotificationMsgModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxNotificationMsgModule\n  });\n  NgxNotificationMsgModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return NgxNotificationMsgModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxNotificationMsgModule, {\n    declarations: function () {\n      return [NgxNotificationMsgComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [NgxNotificationMsgComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NgxNotificationDirection, NgxNotificationMsgComponent, NgxNotificationMsgComponentState, NgxNotificationMsgModule, NgxNotificationMsgService, NgxNotificationStatusMsg }; //# sourceMappingURL=ngx-notification-msg.js.map","map":null,"metadata":{},"sourceType":"module"}