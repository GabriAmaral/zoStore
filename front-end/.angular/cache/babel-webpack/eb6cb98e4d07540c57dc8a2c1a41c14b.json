{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../event-bus/event-bus.service\";\nexport var NativeMessageType = /*#__PURE__*/(() => {\n  (function (NativeMessageType) {\n    NativeMessageType[\"OPEN_REVISTAR\"] = \"openRevistar\";\n    NativeMessageType[\"OPEN_TRADE\"] = \"openTrade\";\n    NativeMessageType[\"CLOSE_NUI\"] = \"closeNui\";\n    NativeMessageType[\"UPDATE_TRADE\"] = \"updateTrade\";\n    NativeMessageType[\"CLOSE_TRADE\"] = \"closeTrade\";\n  })(NativeMessageType || (NativeMessageType = {}));\n\n  return NativeMessageType;\n})();\nexport let NativeService = /*#__PURE__*/(() => {\n  class NativeService {\n    constructor(httpClient, router, eventBus) {\n      this.httpClient = httpClient;\n      this.router = router;\n      this.eventBus = eventBus;\n      this.showNui = true;\n      this.inTrade = false;\n      this.data = null;\n      window.addEventListener('message', this.handleNativeEvent.bind(this));\n      window.addEventListener('keyup', this.close.bind(this));\n    }\n\n    sendData(event, data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield this.httpClient.post(`http://zo_blitz/${event}`, JSON.stringify(data)).toPromise();\n      });\n    }\n\n    close(event) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (event.key === 'Escape') {\n          if (this.inTrade) {\n            console.log(\"cancel trade\");\n            this.eventBus.emit({\n              name: NativeMessageType.CLOSE_TRADE,\n              value: false\n            });\n          }\n\n          yield this.sendData(\"closeNui\", {\n            showNui: this.showNui\n          });\n        }\n      });\n    }\n\n    handleNativeEvent(event) {\n      var _a;\n\n      return __awaiter(this, void 0, void 0, function* () {\n        switch ((_a = event === null || event === void 0 ? void 0 : event.data) === null || _a === void 0 ? void 0 : _a.type) {\n          case NativeMessageType.OPEN_REVISTAR:\n            this.showNui = true;\n            this.data = event === null || event === void 0 ? void 0 : event.data;\n            yield this.router.navigate(['/revistar']);\n            break;\n\n          case NativeMessageType.CLOSE_TRADE:\n            this.data = event === null || event === void 0 ? void 0 : event.data;\n            this.inTrade = false;\n            this.eventBus.emit({\n              name: NativeMessageType.CLOSE_TRADE,\n              value: this.data.sucs\n            });\n            break;\n\n          case NativeMessageType.UPDATE_TRADE:\n            this.data = event === null || event === void 0 ? void 0 : event.data;\n            this.eventBus.emit({\n              name: NativeMessageType.UPDATE_TRADE,\n              value: this.data.trade\n            });\n            break;\n\n          case NativeMessageType.OPEN_TRADE:\n            this.showNui = true;\n            this.inTrade = true;\n            this.data = event === null || event === void 0 ? void 0 : event.data;\n            yield this.router.navigate(['/trade']);\n            break;\n\n          case NativeMessageType.CLOSE_NUI:\n            this.showNui = false;\n            this.inTrade = false;\n            yield this.router.navigate(['/']);\n            break;\n        }\n      });\n    }\n\n  }\n\n  NativeService.ɵfac = function NativeService_Factory(t) {\n    return new (t || NativeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.EventBusService));\n  };\n\n  NativeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NativeService,\n    factory: NativeService.ɵfac,\n    providedIn: 'root'\n  });\n  return NativeService;\n})();","map":null,"metadata":{},"sourceType":"module"}