{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { NgxNotificationStatusMsg } from 'ngx-notification-msg';\nimport { SelectQtdComponent } from '../../shared/select-qtd/select-qtd.component';\nlet TradeComponent = class TradeComponent {\n  constructor(nativeService, dialog, eventBus, ngxNotificationMsgService) {\n    var _a, _b, _c, _d;\n\n    this.nativeService = nativeService;\n    this.dialog = dialog;\n    this.eventBus = eventBus;\n    this.ngxNotificationMsgService = ngxNotificationMsgService;\n    this.trade = (_b = (_a = this.nativeService) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.trade;\n    this.ids = (_d = (_c = this.nativeService) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.ids;\n    this.eventBus.on(\"updateTrade\", trade => {\n      this.trade = trade;\n    });\n    this.eventBus.on(\"closeCancelTrade\", () => {\n      var _a;\n\n      this.nativeService.sendData(\"closeCancelTrade\", {\n        key: (_a = this.trade) === null || _a === void 0 ? void 0 : _a.key,\n        ids: this.ids\n      });\n    });\n    this.eventBus.on(\"closeTrade\", sucs => {\n      this.statusTrade = sucs;\n      setTimeout(() => {\n        this.statusTrade = false;\n      }, 1500);\n    });\n  }\n\n  ngOnInit() {}\n\n  itemAddTrade(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // console.log(data.event, this.ids)\n      const dialogRef = this.dialog.open(SelectQtdComponent, {\n        height: \"34rem\",\n        width: \"22rem\",\n        data: data.event\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        var _a;\n\n        let qtd = result;\n\n        if (qtd) {\n          let checkWeigthInInventoryOther = function (trade, ids) {\n            var _a;\n\n            let otherTrade = trade[ids.other];\n            let itemWeigth = ((_a = data.event) === null || _a === void 0 ? void 0 : _a.weight) * qtd;\n\n            if ((otherTrade === null || otherTrade === void 0 ? void 0 : otherTrade.maxWeigthInventory) < itemWeigth + (otherTrade === null || otherTrade === void 0 ? void 0 : otherTrade.weigthInventory)) {\n              this.ngxNotificationMsgService.open({\n                status: NgxNotificationStatusMsg.INFO,\n                header: 'Aviso',\n                messages: [\"Sem espaço na mochila do destinatário para este item\"],\n                closeable: false,\n                delay: 5000\n              });\n              return false;\n            }\n\n            return true;\n          };\n\n          if (checkWeigthInInventoryOther(this.trade, this.ids)) {\n            data.event.qtd = qtd;\n            this.nativeService.sendData(\"addItemTrade\", {\n              key: (_a = this.trade) === null || _a === void 0 ? void 0 : _a.key,\n              ids: this.ids,\n              item: data.event\n            }).then(callback => {\n              this.trade = JSON.parse(callback);\n            });\n          }\n\n          return;\n        }\n      });\n    });\n  }\n\n  checkTrade(trade) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      this.nativeService.sendData(\"readyTrade\", {\n        key: (_a = this.trade) === null || _a === void 0 ? void 0 : _a.key,\n        ids: this.ids,\n        confirm: trade === null || trade === void 0 ? void 0 : trade.ready\n      }).then(callback => {\n        this.trade = JSON.parse(callback);\n      });\n      return;\n    });\n  }\n\n  confirmTrade() {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      this.trade[this.ids.my].confirm = !((_a = this.trade[this.ids.my]) === null || _a === void 0 ? void 0 : _a.confirm);\n      this.nativeService.sendData(\"confirmTrade\", {\n        key: (_b = this.trade) === null || _b === void 0 ? void 0 : _b.key,\n        ids: this.ids,\n        confirm: (_c = this.trade[this.ids.my]) === null || _c === void 0 ? void 0 : _c.confirm\n      }).then(callback => {\n        this.trade = JSON.parse(callback);\n      });\n      return;\n    });\n  }\n\n  itemRemoveTrade(data) {\n    var _a;\n\n    this.nativeService.sendData(\"removeItemTrade\", {\n      key: (_a = this.trade) === null || _a === void 0 ? void 0 : _a.key,\n      ids: this.ids,\n      item: data.item\n    }).then(callback => {\n      this.trade = JSON.parse(callback);\n    });\n    return;\n  }\n\n};\nTradeComponent = __decorate([Component({\n  selector: 'app-trade',\n  templateUrl: './trade.component.html',\n  styleUrls: ['./trade.component.scss']\n})], TradeComponent);\nexport { TradeComponent };","map":null,"metadata":{},"sourceType":"module"}