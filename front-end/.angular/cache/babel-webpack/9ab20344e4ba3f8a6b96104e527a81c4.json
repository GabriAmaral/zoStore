{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport var NativeMessageType = /*#__PURE__*/(() => {\n  (function (NativeMessageType) {\n    NativeMessageType[\"OPEN_NUI\"] = \"openNui\";\n    NativeMessageType[\"CLOSE_NUI\"] = \"closeNui\";\n  })(NativeMessageType || (NativeMessageType = {}));\n\n  return NativeMessageType;\n})();\nexport let NativeService = /*#__PURE__*/(() => {\n  class NativeService {\n    constructor(httpClient, router) {\n      this.httpClient = httpClient;\n      this.router = router;\n      this.showNui = true;\n      this.inventorySearched = null;\n      window.addEventListener('message', this.handleNativeEvent.bind(this));\n      window.addEventListener('keyup', this.close.bind(this));\n    }\n\n    sendData(event, data) {\n      return __awaiter(this, void 0, void 0, function* () {\n        data.action = event;\n        return yield this.httpClient.post(`http://zo_blitz/post_client`, JSON.stringify({\n          data\n        })).toPromise();\n      });\n    }\n\n    close(event) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (event.key === 'Escape') {\n          yield this.sendData(\"closeNui\", {\n            showNui: this.showNui\n          });\n        }\n      });\n    }\n\n    handleNativeEvent(event) {\n      var _a, _b;\n\n      return __awaiter(this, void 0, void 0, function* () {\n        switch ((_a = event === null || event === void 0 ? void 0 : event.data) === null || _a === void 0 ? void 0 : _a.message) {\n          case NativeMessageType.OPEN_NUI:\n            this.showNui = true;\n            this.inventorySearched = (_b = event === null || event === void 0 ? void 0 : event.data) === null || _b === void 0 ? void 0 : _b.inventorySearched;\n            yield this.router.navigate(['/nui']);\n            break;\n\n          case NativeMessageType.CLOSE_NUI:\n            this.showNui = false;\n            yield this.router.navigate(['/']);\n            break;\n        }\n      });\n    }\n\n  }\n\n  NativeService.ɵfac = function NativeService_Factory(t) {\n    return new (t || NativeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  NativeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NativeService,\n    factory: NativeService.ɵfac,\n    providedIn: 'root'\n  });\n  return NativeService;\n})();","map":null,"metadata":{},"sourceType":"module"}